apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.vanniktech.dependency.graph.generator'

version = 0.01
mainClassName = 'com.retrobot.core.Launcher'


buildscript {
    ext.kotlin_version = '1.4.10'

    ext.coroutines_version = '1.4.0-M1'            // Async Kotlin code
    ext.emoji_java_version = '5.1.1'               // Emoji Parser/Processor
    ext.exposed_version = '0.27.1'                 // Database Wrapper
    ext.flyway_version = '7.0.0'                   // Database version/migration control
    ext.h2_version = '1.4.200'                     // Embeddable JDBC Database
    ext.jda_version = '4.2.0_209'                  // Discord API Wrapper
    ext.junit5_version = '5.7.0'                   // Testing
    ext.koin_version = '2.1.6'                     // Service Locator (DI)
    ext.konfig_version = '1.6.10.0'                // System config properties
    ext.kotlin_csv_version = '0.11.1'              // CSV Parser
    ext.mockk_version = '1.10.2'                   // Testing
    ext.moshi_version = '1.11.0'                   // JSON Parser
    ext.scrimage_version = '4.0.8'                 // Image Parser/Processor
    ext.shadow_version = '6.1.0'                   // JAR builder/minimizer
    ext.twitch4j_version = '1.1.2'                 // Twitch API Wrapper

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
        classpath "com.vanniktech:gradle-dependency-graph-generator-plugin:0.5.0"
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

dependencies {
    implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "net.dv8tion:JDA:$jda_version"
    implementation "com.sksamuel.scrimage:scrimage-core:$scrimage_version"
    implementation "com.vdurmont:emoji-java:$emoji_java_version"
    implementation "com.github.doyaaaaaken:kotlin-csv-jvm:$kotlin_csv_version"
    implementation "com.h2database:h2:$h2_version"
    implementation "com.natpryce:konfig:$konfig_version"
    implementation "org.koin:koin-core:$koin_version"
    implementation "com.github.twitch4j:twitch4j-helix:$twitch4j_version"
    implementation "org.flywaydb:flyway-core:$flyway_version"
    implementation "com.squareup.moshi:moshi:$moshi_version"

    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit5_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "org.koin:koin-test:$koin_version"
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
}

test {
    useJUnitPlatform()
}

shadowJar {
    // TODO Cannot minimize while using any type of reflection.  We cannot guarantee all dependencies will be included.  Find other ways to reduce jar size
//    minimize()
//    minimize {
//        exclude(dependency('com.h2database:h2:.*'))
//        exclude(dependency('org.jetbrains.exposed:.*'))
//        exclude(dependency('org.jetbrains.kotlin:kotlin-reflect:.*'))
//    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'RetroBot',
                'Main-Class': mainClassName
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}